# ===========================================
# üöÄ Vidyamrit Full Stack Deployment Workflow
# ===========================================
# This workflow automates the deployment of our full-stack Vidyamrit application
# to an AWS EC2 instance. It handles both the PWA frontend and Node.js backend
# deployment in a single, coordinated process.

name: Deploy Full Stack App to EC2

# ===========================================
# üì¶ Trigger Configuration
# ===========================================
# The deployment process begins automatically when code is pushed to the main branch
on:
  push:
    branches:
      - main

# ===========================================
# üîê Environment Variables
# ===========================================
# These variables are securely stored in GitHub Secrets and
# are made available to both frontend and backend during deployment
env:
  # Frontend Environment Variables
  VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
  VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
  VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
  VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
  VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
  VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
  VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

  # Backend Environment Variables
  PORT: ${{ secrets.PORT }}
  MONGO_URI: ${{ secrets.MONGO_URI }}
  FIREBASE_SERVICE_ACCOUNT_KEY_PATH: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_PATH }}
  MAIL_USER: ${{ secrets.MAIL_USER }}
  MAIL_PASS: ${{ secrets.MAIL_PASS }}
  CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  LOGGER_PATH: ${{ secrets.LOGGER_PATH }}

# ===========================================
# üë∑‚Äç‚ôÇÔ∏è Build Jobs (on GitHub Action Runners)
# ===========================================
jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Initial Setup
      # -------------------------------------------
      # First, we get our code and set up Node.js environment
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 2Ô∏è‚É£ Frontend Build Process
      # -------------------------------------------
      # Build our React/Vite PWA application
      - name: Install frontend dependencies
        working-directory: ./pwa
        run: npm ci

      - name: Create frontend .env
        working-directory: ./pwa
        run: |
          cat <<EOF > .env
          VITE_BACKEND_URL=${VITE_BACKEND_URL}
          VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY}
          VITE_FIREBASE_AUTH_DOMAIN=${VITE_FIREBASE_AUTH_DOMAIN}
          VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}
          VITE_FIREBASE_STORAGE_BUCKET=${VITE_FIREBASE_STORAGE_BUCKET}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${VITE_FIREBASE_MESSAGING_SENDER_ID}
          VITE_FIREBASE_APP_ID=${VITE_FIREBASE_APP_ID}
          EOF

      - name: Build frontend
        working-directory: ./pwa
        run: npm run build

      # 3Ô∏è‚É£ Backend Build Process
      # -------------------------------------------
      # Compile our TypeScript backend to JavaScript
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Create backend .env
        working-directory: ./backend
        run: |
          cat <<EOF > .env
          PORT=${PORT}
          MONGO_URI=${MONGO_URI}
          FIREBASE_SERVICE_ACCOUNT_KEY_PATH=${FIREBASE_SERVICE_ACCOUNT_KEY_PATH}
          MAIL_USER=${MAIL_USER}
          MAIL_PASS=${MAIL_PASS}
          CORS_ORIGIN=${CORS_ORIGIN}
          OPENAI_API_KEY=${OPENAI_API_KEY}
          LOGGER_PATH=${LOGGER_PATH}
          EOF

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      # ===========================================
      # üíº Deployment Preparation
      # ===========================================

      # 1Ô∏è‚É£ Deployment Organization
      # -------------------------------------------
      # Organize our built files for efficient deployment
      - name: Prepare deployment folder
        run: |
          # Create organized structure
          mkdir -p deploy/frontend
          mkdir -p deploy/backend

          # Copy frontend build
          cp -r pwa/dist/* deploy/frontend/

          # Copy backend build and required files
          cp -r backend/dist deploy/backend/dist
          cp backend/package.json deploy/backend/
          cp backend/firebaseServiceAccountKey.json deploy/backend/ || echo "Firebase key will be linked on server"

      # 2Ô∏è‚É£ Upload to EC2
      # -------------------------------------------
      # Securely transfer our deployment files to EC2
      - name: Upload artifacts to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "deploy/"
          target: "/home/ubuntu/prod-deployment/"
          overwrite: true

      # 3Ô∏è‚É£ Final Deployment
      # -------------------------------------------
      # Deploy our application on the EC2 instance
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Load nvm and use Node.js
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

            # Navigate to deployment directory
            cd /home/ubuntu/prod-deployment/deploy

            echo "üìÑ Creating backend environment configuration"
            cat <<EOF > backend/.env
            PORT=${{ secrets.PORT }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            FIREBASE_SERVICE_ACCOUNT_KEY_PATH=/home/ubuntu/prod-deployment/deploy/backend/firebaseServiceAccountKey.json
            MAIL_USER=${{ secrets.MAIL_USER }}
            MAIL_PASS=${{ secrets.MAIL_PASS }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            LOGGER_PATH=${{ secrets.LOGGER_PATH }}
            EOF

            cd backend

            echo "üì¶ Installing production dependencies"
            npm ci

            echo "üîë Linking Firebase service account key"
            ln -sf /home/ubuntu/secrets/firebaseServiceAccountKey.json /home/ubuntu/prod-deployment/deploy/backend/firebaseServiceAccountKey.json

            echo "üöÄ Restarting backend service with PM2"
            # Gracefully stop and remove existing instance
            pm2 restart backend-app || pm2 start dist/index.js --name backend-app

            echo "üåê Updating frontend in Nginx"
            # Clear existing deployment and copy new files
            sudo rm -rf /var/www/html/*
            sudo cp -r /home/ubuntu/prod-deployment/deploy/frontend/* /var/www/html/

            echo "üè• Health check"
            sleep 5
            pm2 status backend-app

            echo "‚úÖ Deployment successfully completed!"
